import logging

import asyncpg
from aiogram import Router, F
from aiogram.filters import CommandStart, Command, CommandObject
from aiogram.types import Message, ReplyKeyboardRemove
from asyncpg import Record
from redis.commands.search.result import Result

from create_bot import bot_url
from keyboards.all_kb import main_kb, mini_kb, private_kb
from middlewares.db_middleware import DatabaseMiddleware
from middlewares.qparam_middleware import QParamMiddleware
import db_utils.db_request as r

start_router = Router()
start_router.message.middleware(DatabaseMiddleware())
start_router.message.middleware(QParamMiddleware())
logger = logging.getLogger(__name__)

@start_router.message(CommandStart())
async def cmd_start(message: Message, command: CommandObject, db: asyncpg.pool.Pool, quname: str, isgroup: bool, isadmin: bool):
    await r.s_aou_user(db, message.from_user.id, message.from_user.first_name, message.from_user.last_name, quname)
    if isadmin:
        await r.s_aou_admin(db, message.from_user.id, message.chat.id, quname,'add')
    if isgroup:
        await r.s_aou_group(db, message.chat.id, message.chat.type, message.chat.title)
        await message.answer(f'–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫ –≤—Å–µ–º –≤ —ç—Ç–æ–º —á–∞—Ç–∏–∫–µ!'
                             f'\n–ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∫–æ–º–∞–Ω–¥–µ /help'
                             f'\n–î–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –≥—Ä—É–ø–ø–µ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /join'
                             f'\n–∏–ª–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –±–æ—Ç –ø–æ —Å—Å—ã–ª–∫–µ {bot_url}?start={message.chat.id}')
    else:
        command_args: str = command.args
        if command_args:
            res: str = await r.s_name_join(db, message.from_user.id, int(command_args), quname)
            await message.answer(f'–ü—Ä–∏–≤–µ—Ç, {quname}!'
                                 f'\n–ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∫–æ–º–∞–Ω–¥–µ /help'
                                 f'\n–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –≥—Ä—É–ø–ø–µ: {res}')
        else:
            await message.answer(f'–ü—Ä–∏–≤–µ—Ç, {quname}!'
                                 f'\n–ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∫–æ–º–∞–Ω–¥–µ /help'
                                 f'\n–î–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –≥—Ä—É–ø–ø–µ –¥–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É'
                                 f', –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ (/start) –∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /join')

@start_router.message(Command('test'))
async def test(message: Message, command: CommandObject, quname: str, isgroup: bool, isadmin: bool):
    command_args: str = command.args
    text: str = (f'test: {command_args}'
                 f'\nquname: {quname}'
                 f'\nisgroup: {isgroup}'
                 f'\nisadmin: {isadmin}')
    await message.reply(text)
    logger.info(command_args)

@start_router.message(Command('join'))
async def join(message: Message, command: CommandObject, db: asyncpg.pool.Pool, quname: str, isgroup: bool, isadmin: bool):
    res: str
    await r.s_aou_user(db, message.from_user.id, message.from_user.first_name, message.from_user.last_name, quname)
    if isadmin:
        await r.s_aou_admin(db, message.from_user.id, message.chat.id, quname,'add')
    if isgroup:
        await r.s_aou_group(db, message.chat.id, message.chat.type, message.chat.title)
        username: str = command.args
        if username:
            res = await r.s_name_join(db, message.from_user.id, message.chat.id, username)
        else:
            res = await r.s_name_join(db, message.from_user.id, message.chat.id, quname)
        await message.answer(f'{res}')
    else:
        await message.answer('–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ!')

@start_router.message(Command('leave'))
async def leave(message: Message, command: CommandObject, db: asyncpg.pool.Pool, quname: str, isgroup: bool, isadmin: bool):
    res: str
    await r.s_aou_user(db, message.from_user.id, message.from_user.first_name, message.from_user.last_name, quname)
    if isadmin:
        await r.s_aou_admin(db, message.from_user.id, message.chat.id, quname,'add')
    if isgroup:
        await r.s_aou_group(db, message.chat.id, message.chat.type, message.chat.title)
        username: str = command.args
        if username:
            res = await r.s_name_leave(db, message.from_user.id, message.chat.id, username)
        else:
            res = await r.s_name_leave(db, message.from_user.id, message.chat.id, quname)
        await message.answer(f'{res}')
    else:
        await message.answer('–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ!')

@start_router.message(Command('kick'))
async def kick(message: Message, command: CommandObject, db: asyncpg.pool.Pool, quname: str, isgroup: bool, isadmin: bool):
    res: str
    await r.s_aou_user(db, message.from_user.id, message.from_user.first_name, message.from_user.last_name, quname)
    if isadmin:
        await r.s_aou_admin(db, message.from_user.id, message.chat.id, quname, 'add')
    if isgroup:
        await r.s_aou_group(db, message.chat.id, message.chat.type, message.chat.title)
        username: str = command.args
        if username:
            res = await r.s_name_kick(db, message.from_user.id, message.chat.id, username)
        else:
            res = await r.s_name_kick(db, message.from_user.id, message.chat.id, quname)
        await message.answer(f'{res}')
    else:
        await message.answer('–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ!')

@start_router.message(Command('readmin'))
async def readmin(message: Message, command: CommandObject, db: asyncpg.pool.Pool, quname: str, isgroup: bool, isadmin: bool):
    res: str
    await r.s_aou_user(db, message.from_user.id, message.from_user.first_name, message.from_user.last_name, quname)
    if isgroup:
        args: list[str] = command.args.split(' ')
        if args.__len__() == 0:
            args.append(quname)
        if args.__len__() == 1:
            args.append('swap')
        if isadmin and args[0] == quname:
            args[1] = 'add'
        await r.s_aou_group(db, message.chat.id, message.chat.type, message.chat.title)
        res = await r.s_aou_admin(db, message.from_user.id, message.chat.id, args[0], args[1])
        await message.answer(f'{res}')
    else:
        await message.answer('–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ!')

@start_router.message(Command('status'))
async def status(message: Message, db: asyncpg.pool.Pool, isgroup: bool):
    res: list[Record]
    answer: str = f'<code>–ò–º—è: –í –≥—Ä—É–ø–ø–µ? –ê–¥–º–∏–Ω? –û—Ç–ø—É—Å–∫–æ–≤ –≤ –≥–æ–¥—É. –í –æ—Ç–ø—É—Å–∫–µ?</code>\n'
    if isgroup:
        res = await r.r_status(db, None, message.chat.id)
        for row in res:
            answer += (f' {row['visible_name']}'
                       f': {'üü¢' if row['user_join'] == 'enable' else '‚ö´'}'
                       f'/{'üëë' if row['user_admin'] == 'enable' else 'üéì'}'
                       f' :üìÖ {row['year_vacation_count']}'
                       f': {'üå¥' if row['now_vacation_count'] > 0 else 'üíº'}\n')
    else:
        res = await r.r_status(db, message.from_user.id, None)
        for row in res:
            answer += (f'{row['chat_name']}|{row['user_join']}|{row['user_admin']}'
                       f'|{row['year_vacation_count']}|{row['now_vacation_count']}\n')
    await message.answer(f'{answer}')


@start_router.message(Command('inline_menu'))
async def inline_menu(message: Message):
    await message.answer('–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:',
                         reply_markup=mini_kb())

@start_router.message(F.text.in_({'–ö–Ω–æ–ø–∫–∞ 1', '–ö–Ω–æ–ø–∫–∞ 2', '–ö–Ω–æ–ø–∫–∞ 3', '–ö–Ω–æ–ø–∫–∞ 4'}))
async def remove_kb(message: Message):
    msg = await message.answer('–£–¥–∞–ª—è—é...', reply_markup=ReplyKeyboardRemove())
    await msg.delete()
