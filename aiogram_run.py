import asyncio
import logging

from create_bot import bot, dp, admins
from handlers.admin_menu import admin_router
from handlers.inline_menu import inline_router
from handlers.start import start_router
from aiogram.types import BotCommand, BotCommandScopeAllPrivateChats


logger = logging.getLogger(__name__)

async def set_all_comads():
    commands = [BotCommand(command='/start', description='–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è'),
                BotCommand(command='/help', description='–ü–æ–º–æ—â—å'),
                BotCommand(command='/join', description='–í—Å—Ç—É–ø–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É'),
                BotCommand(command='/leave', description='–ü–æ–∫–∏–Ω—É—Ç—å –≥—Ä—É–ø–ø—É'),
                BotCommand(command='/all', description='–í—Å–µ –æ—Ç–ø—É—Å–∫–∞ –≥—Ä—É–ø–ø—ã'),
                BotCommand(command='/upcoming', description='–ë–ª–∏–∂–∞–π—à–∏–µ –æ—Ç–ø—É—Å–∫–∞ –≥—Ä—É–ø–ø—ã'),
                BotCommand(command='/cross', description='–ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –æ—Ç–ø—É—Å–∫–æ–≤ –≥—Ä—É–ø–ø—ã'),
                BotCommand(command='/kick', description='–ò—Å–∫–ª—é—á–∏—Ç—å –∏–∑ –≥—Ä—É–ø–ø—ã'),
                BotCommand(command='/readmin', description='–ù–∞–∑–Ω–∞—á–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞'),
                BotCommand(command='/status', description='–°—Ç–∞—Ç—É—Å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤')
                ]
    await bot.set_my_commands(commands)

async def set_private_comads():
    commands = [BotCommand(command='/start', description='–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è'),
                BotCommand(command='/help', description='–ü–æ–º–æ—â—å'),
                BotCommand(command='/add', description='–î–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—É—Å–∫'),
                BotCommand(command='/account', description='–ê–Ω–∫–µ—Ç–∞'),
                BotCommand(command='/vacation', description='–ú–æ–∏ –æ—Ç–ø—É—Å–∫–∞'),
                BotCommand(command='/all', description='–í—Å–µ –æ—Ç–ø—É—Å–∫–∞ –º–æ–∏—Ö –≥—Ä—É–ø–ø'),
                BotCommand(command='/upcoming', description='–ë–ª–∏–∂–∞–π—à–∏–µ –æ—Ç–ø—É—Å–∫–∞ –º–æ–∏—Ö –≥—Ä—É–ø–ø'),
                BotCommand(command='/cross', description='–ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –º–æ–∏—Ö –æ—Ç–ø—É—Å–∫–æ–≤'),
                BotCommand(command='/status', description='–°—Ç–∞—Ç—É—Å')
                ]
    await bot.set_my_commands(commands, BotCommandScopeAllPrivateChats())

async def start_bot():
    logger.warning('Bot running')
    bn = await bot.get_my_name()
    for admin_id in admins:
        try:
            await bot.send_message(admin_id, f'{bn.name} –∑–∞–ø—É—â–µ–Ω! ü•≥')
        except Exception as e:
            logger.error(f'start_bot(): {e}')

async def stop_bot():
    logger.warning('Bot stopping')
    bn = await bot.get_my_name()
    for admin_id in admins:
        try:
            await bot.send_message(admin_id, f'{bn.name} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ó–∞ —á—Ç–æ? üòî')
        except Exception as e:
            logger.error(f'stop_bot(): {e}')

async def main():
    dp.include_router(start_router)
    dp.include_router(inline_router)
    dp.include_router(admin_router)
    dp.startup.register(set_all_comads)
    dp.startup.register(set_private_comads)

    dp.startup.register(start_bot)
    dp.shutdown.register(stop_bot)


    try:
        await bot.delete_webhook(drop_pending_updates=True)
        await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())
    except Exception as e:
        logger.error(f'main(): {e}')
    finally:
        await bot.session.close()
        await exit(0)

if __name__ == "__main__":
    asyncio.run(main())
